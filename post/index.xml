<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yrzs&#39;s blog</title>
    <link>https://yrzs.github.io/post/</link>
    <description>Recent content in Posts on Yrzs&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 17 Jul 2022 14:44:41 +0800</lastBuildDate><atom:link href="https://yrzs.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MyISAM Index</title>
      <link>https://yrzs.github.io/post/2022/7/17/myisam/</link>
      <pubDate>Sun, 17 Jul 2022 14:44:41 +0800</pubDate>
      
      <guid>https://yrzs.github.io/post/2022/7/17/myisam/</guid>
      <description>InnoDB中索引即是数据，也就是 聚簇索引 的 B+Tree 的叶子节点已经把所有完整的用户记录都包含了。
MyISAM的索引方案虽然也使用树形结构，但是却将索引和数据分开存储：
将表中的记录按照记录的插入顺序单独存储在一个文件中，称之为 数据文件 这个文件并不划分为若干个 数据页,有多少记录就往这个文件中塞多少记录，通过行号快速访问到某一条记录。MyISAM 记录也需要记录头信息来存储一些额外数据，由于在插入数据的时候并没有刻意按照主键大小排序，所以我们并不能在这些数据上使用二分法进行查找。
使用MyISAM存储引擎的table会把索引细腻下另外存储到一个文件中，称之为 索引文件 MyISAM会单独为table的primary key 创建一个索引，只不过在索引的叶子节点存储的不是完整的用户记录，而是 主键值+行号 的组合。也就是先通过索引找到行号，再通过行号找到对应的记录。
这一点和 InnoDB 是完全不同的，在InnoDB中，我们只需要根据主键值对 聚簇索引 进行一次查找就能找到相应的记录，而在 MyISAM 中 却需要进行一次 回表 操作，这意味着 MyISAM 中建立的索引相当于全都是 二级索引。
如果有需要的话，我们也可以对其他的列分别建立索引或者建立联合索引，原理和 InnoDB 索引差不多，不过在叶子节点存储的是 相应的列+行号 。 这些索引也都是 二级索引 MyISAM的行格式有定长记录格式（Static）、变长记录格式（Dynamic）、压缩记录格式（Compressed）。</description>
    </item>
    
    <item>
      <title>Innodb Index</title>
      <link>https://yrzs.github.io/post/2022/7/14/innodb-index/</link>
      <pubDate>Thu, 14 Jul 2022 11:54:52 +0800</pubDate>
      
      <guid>https://yrzs.github.io/post/2022/7/14/innodb-index/</guid>
      <description>之前的 简单索引方案 假设所有的目录项都可以在物理存储器上连续存储，这样会有几个问题：
InnoDB 是使用页来作为管理存储空间的基本单位，也就是最多能保证 16KB 的连续存储空间，而随着表中记 录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现 实的。 我们时常会对记录进行增删，假设我们把 页28 中的记录都删除了，页28 也就没有存在的必要了，那意味 着 目录项2 也就没有存在的必要了，这就需要把 目录项2 后的目录项都向前移动一下，这种牵一发而动全身 InnoDB 中的索引方案 目录项记录 的 record_type 值是1， 而普通用户记录的 record_type 值是0 目录项记录 只有主键值和页的编号两个列， 而普通的用户记录的列是用户自己定义的，可能包含多很多列，另外还有 InnoDB 自己添加的隐藏列 只有在存储 目录项记录 的页中的主键值最小的 目录项记录 的 min_rec_mask 值为 1 ，其他别的记录的 min_rec_mask 值都是 0 虽然说 目录项记录 中只存储主键值和对应的页号， 比 用户记录 需要的存储空间小多了，但是不论怎么说一个页的大小只有 16KB ， 能存放的 目录项记录 也是有限的。，那如果表中的数据太多，以至于一个数据页不足以存放所有的 目录项记录 会新分配一个 目录项记录 的页。
如图，我们生成了一个存储更高级目录项的 页33 ，这个页中的两条记录分别代表 页30 和 页32 ，如果 用户记录 的主键值在 (1, 320) 之间，则到 页30 中查找更详细的 目录项记录 ，如果主键值不小于 320 的话，就到 页32 中查找更详细的 目录项记录 。</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>https://yrzs.github.io/post/2022/7/13/</link>
      <pubDate>Wed, 13 Jul 2022 16:02:42 +0800</pubDate>
      
      <guid>https://yrzs.github.io/post/2022/7/13/</guid>
      <description>在InnoDB中 数据页 有七个组成部分,各个数据页可以组成一个双向链表， 而每个数据页中的记录会按照主键值从小到大的顺序组成一个 单向链表 ,每个数据页都会为存储在它里边儿的数据生成一个 页目录 ， 在通过主键查找某条记录的时候可以在页目录中使用 二分法 快速定位到对应的槽（slot）,然后遍历该slot对应分组中的记录即可快速找到指定的记录。
没有索引的查找 在一个页中的查找 假设目前表中的记录比较少，所有的记录都可以被放到一个页中，在查找记录的时候可以根据搜索条件的不同分为两种情况：
以主键为搜索条件 在 页目录 中使用 二分法 快速定位到对应的slot&amp;hellip;
以其他列作为搜索条件 因为 数据页 中并没有对非主键列建立所谓的 页目录 ，所以我们无法通过 二分法 快速定位到相应的slot。 这种情况下只能从 最小记录 开始遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。（效率非常低下）
在很多页中查找 真实情况下表中存放的记录都是非常多的，需要很多数据页来存储这些记录，在很多页中查找记录可分为两个步骤：
定位到记录所在的页 从所在的页中查找相应的记录 在没有索引的情况下，不论是根据主键列还是其他列进行查找， 由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一页中根据刚才所说的查找方式去查找置顶的记录。 （非常耗时的操作）
索引 一个简单的索引方案 我们在根据某个搜索条件查找一些记录时为什么要遍历所有的数据页呢？
因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页的数据，所以不得不依次遍历所有数据页。
所以如果 我们想快速的定位到需要查找的记录在哪些数据页中该咋办？还记得我们为根据主键值快速定位一条记录在页中的位 置而设立的页目录么？我们也可以想办法为快速定位记录所在的数据页而建立一个别的目录，建这个目录必须完成下边这些事儿：
下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值（页分裂） 给所有的页建立一个目录项 数据页的编号可能并不是连续的， 因为这些16kb的页在物理存储上可能并不挨着，所以如果想从这么多页中根据主键值快速定位某些记录所在的页， 我们需要给它们做个目录，每个页对应一个目录项，其结构为：
页的用户记录中最小的主键值，用key表示 页号，page_no表示 以 页28 为例，它对应 目录项2 ，这个目录项中包含着该页的页号 28 以及该页中用户记录的最小主键 值 5 。我们只需要把几个目录项在物理存储器上连续存储，比如把他们放到一个数组里，就可以实现根 据主键值快速查找某条记录的功能了。比方说我们想找主键值为 20 的记录，具体查找过程分两步： 先从目录项中根据二分法快速确定出主键值为 20 的记录在 目录项3 中（因为 12 &amp;lt; 20 &amp;lt; 209 ），它对应的页是 页9 再根据前边说的在页中查找记录的方式去 页9 中定位具体的记录 至此，针对数据页做的简易目录就搞定了。 这个 目录 就称为 索引</description>
    </item>
    
    <item>
      <title>Mysql InnoDB 数据页</title>
      <link>https://yrzs.github.io/post/2022/7/12/mysql-innodb/</link>
      <pubDate>Tue, 12 Jul 2022 15:40:41 +0800</pubDate>
      
      <guid>https://yrzs.github.io/post/2022/7/12/mysql-innodb/</guid>
      <description>InnoDB为了不同的目的而设计了不同类型的页，我们把用于存放记录的页叫做 数据页 。
一个数据页可以被大致划分为7个部分，分别是:
File Header ，表示页的一些通用信息，占固定的38字节。 Page Header ，表示数据页专有的一些信息，占固定的56个字节。 Infimum + Supremum ，两个虚拟的伪记录，分别表示页中的最小和最大记录，占固定的 26 个字节。 User Records ：真实存储我们插入的记录的部分，大小不固定。 Free Space ：页中尚未使用的部分，大小不确定。 Page Directory ：页中的某些记录相对位置，也就是各个槽在页面中的地址偏移量，大小不固定，插 入的记录越多，这个部分占用的空间越多。 File Trailer ：用于检验页是否完整的部分，占用固定的8个字节。 前4个字节代表页的校验和 后4个字节代表页面被最后修改时对应的日志序列位置（LSN） 每个记录的头信息中都有一个 next_record 属性，从而使页中的所有记录串联成一个 单链表 。
InnoDB 会为把页中的记录划分为若干个组，每个组的最后一个记录的地址偏移量作为一个 槽 ，存放在 Page Directory 中，所以在一个页中根据主键查找记录是非常快的，分为两步：
通过二分法确定该记录所在的槽(slot)。 通过记录的next_record属性遍历该槽所在的组中的各个记录。 每个数据页的 File Header 部分都有上一个和下一个页的编号，所以所有的数据页会组成一个 双链表 。
为保证从内存中同步到磁盘的页的完整性，在页的首部和尾部都会存储页中数据的校验和和页面最后修改时 对应的 LSN 值，如果首部和尾部的校验和和 LSN 值校验不成功的话，就说明同步过程出现了问题。&amp;ndash;File Trailer</description>
    </item>
    
  </channel>
</rss>
